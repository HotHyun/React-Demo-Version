{"ast":null,"code":"var _jsxFileName = \"/Users/gazilab_sanghyeon/Desktop/React/Demo Version 3/src/components/state/auth-context.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/React.createContext({\n  isLoggedIn: false,\n  onLogout: () => {},\n  onLogIn: (email, password) => {}\n});\nexport const AuthContextProvider = props => {\n  _s();\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  useEffect(() => {\n    const Check_LogIn = localStorage.getItem('isLoggedIn'); // localStorage에서 isLoggedIn 이라는 이름을 가진 Item을 가져옴\n    if (Check_LogIn === '1') {\n      setIsLoggedIn(true); // 만약 Item의 value가 1이라면 setIsLoggedIn을 true로 세팅 -> true에 종속된 컴포넌트만 출력될 것임\n    }\n  }, []);\n  const loginHandler = (email, password) => {\n    // We should of course check email and password\n    // But it's just a dummy/ demo anyways\n    localStorage.setItem('isLoggedIn', '1'); // 로그인을 눌렀을 때 localStorage에 isLogggedIn 이름을 가진 Item의 value를 1로 저장\n    setIsLoggedIn(true); // isLoggedIn 변수를 true로 설정\n  };\n\n  const logoutHandler = () => {\n    localStorage.removeItem('isLoggedIn'); // 로그아웃을 눌렀을 때 localStorage에 isLoggedIn 이름을 가진 Item을 삭제\n    setIsLoggedIn(false);\n  };\n  /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthContextProvider, \"fKLMlyFH2GMrhNeUDpp+0z1yiCo=\");\n_c = AuthContextProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"names":["React","useState","useEffect","AuthContext","createContext","isLoggedIn","onLogout","onLogIn","email","password","AuthContextProvider","props","setIsLoggedIn","Check_LogIn","localStorage","getItem","loginHandler","setItem","logoutHandler","removeItem","children"],"sources":["/Users/gazilab_sanghyeon/Desktop/React/Demo Version 3/src/components/state/auth-context.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst AuthContext = React.createContext({\n    isLoggedIn: false,\n    onLogout: () => {},\n    onLogIn: (email, password) => {},\n});\n\nexport const AuthContextProvider = (props) => {\n    const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n    useEffect(() => {\n        const Check_LogIn = localStorage.getItem('isLoggedIn'); // localStorage에서 isLoggedIn 이라는 이름을 가진 Item을 가져옴\n        if (Check_LogIn === '1') {\n            setIsLoggedIn(true); // 만약 Item의 value가 1이라면 setIsLoggedIn을 true로 세팅 -> true에 종속된 컴포넌트만 출력될 것임\n        }\n    }, []);\n\n    const loginHandler = (email, password) => {\n        // We should of course check email and password\n        // But it's just a dummy/ demo anyways\n        localStorage.setItem('isLoggedIn', '1'); // 로그인을 눌렀을 때 localStorage에 isLogggedIn 이름을 가진 Item의 value를 1로 저장\n        setIsLoggedIn(true); // isLoggedIn 변수를 true로 설정\n    };\n\n    const logoutHandler = () => {\n        localStorage.removeItem('isLoggedIn'); // 로그아웃을 눌렀을 때 localStorage에 isLoggedIn 이름을 가진 Item을 삭제\n        setIsLoggedIn(false);\n    };\n\n    <AuthContext.Provider>{props.children}</AuthContext.Provider>;\n};\n\nexport default AuthContext;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC;AAEnD,MAAMC,WAAW,gBAAGH,KAAK,CAACI,aAAa,CAAC;EACpCC,UAAU,EAAE,KAAK;EACjBC,QAAQ,EAAE,MAAM,CAAC,CAAC;EAClBC,OAAO,EAAE,CAACC,KAAK,EAAEC,QAAQ,KAAK,CAAC;AACnC,CAAC,CAAC;AAEF,OAAO,MAAMC,mBAAmB,GAAIC,KAAK,IAAK;EAAA;EAC1C,MAAM,CAACN,UAAU,EAAEO,aAAa,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EAEnDC,SAAS,CAAC,MAAM;IACZ,MAAMW,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC;IACxD,IAAIF,WAAW,KAAK,GAAG,EAAE;MACrBD,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;IACzB;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMI,YAAY,GAAG,CAACR,KAAK,EAAEC,QAAQ,KAAK;IACtC;IACA;IACAK,YAAY,CAACG,OAAO,CAAC,YAAY,EAAE,GAAG,CAAC,CAAC,CAAC;IACzCL,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;EACzB,CAAC;;EAED,MAAMM,aAAa,GAAG,MAAM;IACxBJ,YAAY,CAACK,UAAU,CAAC,YAAY,CAAC,CAAC,CAAC;IACvCP,aAAa,CAAC,KAAK,CAAC;EACxB,CAAC;EAED,qBAAC,WAAW,CAAC,QAAQ;IAAA,UAAED,KAAK,CAACS;EAAQ;IAAA;IAAA;IAAA;EAAA,QAAwB;AACjE,CAAC;AAAC,GAvBWV,mBAAmB;AAAA,KAAnBA,mBAAmB;AAyBhC,eAAeP,WAAW;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}