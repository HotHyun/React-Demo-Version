{"ast":null,"code":"var _jsxFileName = \"/Users/gazilab_sanghyeon/Desktop/React/Demo Version 3/src/components/Login/Login.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useReducer, useContext } from 'react';\nimport Card from '../UI/Card/Card';\nimport classes from './Login.module.css';\nimport Button from '../UI/Button/Button';\nimport AuthContext from '../state/auth-context';\nimport Input from '../input/input';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Login = () => {\n  _s();\n  /* const [enteredEmail, setEnteredEmail] = useState('');\n  const [emailIsValid, setEmailIsValid] = useState(); */\n  /* const [enteredPassword, setEnteredPassword] = useState('');\n  const [passwordIsValid, setPasswordIsValid] = useState(); */\n  const [formIsValid, setFormIsValid] = useState(false);\n  const emailReducer = (state, action) => {\n    if (action.type === 'USER_INPUT') {\n      return {\n        value: action.value,\n        isValid: action.value.includes('@')\n      }; // dispatch가 호출하고 싶은 함수의 형태가 USER_INPUT의 type을 가질 때 function의 action(최신 값)의 정보를 가져옴\n    }\n\n    if (action.type === 'INPUT') {\n      return {\n        value: state.value,\n        isValid: state.value.includes('@')\n      }; // dispatch가 호출하고 싶은 함수의 형태가 INPUT의 type을 가질 때 function의 state(prevState)의 정보를 가져옴 -> blur 처리\n    }\n\n    return {\n      value: '',\n      isValid: false\n    }; // 둘다 아닐 때는 기본 값을 반환\n  };\n\n  const [emailState, dispatch] = useReducer(emailReducer, {\n    value: '',\n    isValid: null\n  }); // 초깃값과 dispatch, emailReducer\n\n  const passwordReducer = (state, action) => {\n    if (action.type === 'USER_INPUT') {\n      return {\n        value: action.value,\n        isValid: action.value.trim().length > 6\n      }; // dispatch가 호출하고 싶은 함수의 형태가 USER_INPUT의 type을 가질 때 function의 action(최신 값)의 정보를 가져옴\n    }\n\n    if (action.type === 'INPUT') {\n      return {\n        value: state.value,\n        isValid: state.value.trim().length > 6\n      }; // dispatch가 호출하고 싶은 함수의 형태가 INPUT의 type을 가질 때 function의 state(prevState)의 정보를 가져옴 -> blur 처리\n    }\n\n    return {\n      value: '',\n      isValid: false\n    }; // 둘다 아닐 때는 기본 값을 반환\n  };\n\n  const [passwordState, p_dispatch] = useReducer(passwordReducer, {\n    value: '',\n    isValid: null\n  }); // 초깃값과 p_dispatch, passwordReducer 지정\n\n  const Authctx = useContext(AuthContext);\n  const emailChangeHandler = event => {\n    dispatch({\n      type: 'USER_INPUT',\n      value: event.target.value\n    }); // event가 일어날 때 값 변환\n  };\n\n  const passwordChangeHandler = event => {\n    p_dispatch({\n      type: 'USER_INPUT',\n      value: event.target.value\n    }); // event가 일어날 때 값 변환\n  };\n\n  const validateEmailHandler = () => {\n    dispatch({\n      type: 'INPUT'\n    }); // event가 일어날 때 값 변환\n  };\n\n  const validatePasswordHandler = () => {\n    p_dispatch({\n      type: 'INPUT'\n    }); // event가 일어날 때 값 변환\n  };\n\n  const submitHandler = event => {\n    event.preventDefault();\n    if (formIsValid) {\n      Authctx.onLogIn(emailState.value, passwordState.value);\n    } else {}\n  };\n  const {\n    isValid: emailIsValid\n  } = emailState;\n  const {\n    isValid: passwordIsValid\n  } = passwordState;\n  useEffect(() => {\n    const identifier = setTimeout(() => {\n      console.log('Checking form valadity!');\n      setFormIsValid(emailIsValid && passwordIsValid);\n    }, 1000);\n    return () => {\n      console.log('CLEANUP');\n      clearTimeout(identifier);\n    };\n  }, [emailIsValid, passwordIsValid]);\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: classes.login,\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(Input, {\n        isValid: emailIsValid,\n        label: 'E-Mail',\n        type: 'email',\n        id: 'email',\n        value: emailState.value,\n        onChange: emailChangeHandler,\n        onBlur: validateEmailHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        isValid: passwordIsValid,\n        label: 'Password',\n        type: 'password',\n        id: 'password',\n        value: passwordState.value,\n        onChange: passwordChangeHandler,\n        onBlur: validatePasswordHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.actions,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          className: classes.btn,\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 9\n  }, this);\n};\n_s(Login, \"cikC4GAa/ghGdNvKEzBk4guLfoE=\");\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","useEffect","useReducer","useContext","Card","classes","Button","AuthContext","Input","Login","formIsValid","setFormIsValid","emailReducer","state","action","type","value","isValid","includes","emailState","dispatch","passwordReducer","trim","length","passwordState","p_dispatch","Authctx","emailChangeHandler","event","target","passwordChangeHandler","validateEmailHandler","validatePasswordHandler","submitHandler","preventDefault","onLogIn","emailIsValid","passwordIsValid","identifier","setTimeout","console","log","clearTimeout","login","actions","btn"],"sources":["/Users/gazilab_sanghyeon/Desktop/React/Demo Version 3/src/components/Login/Login.js"],"sourcesContent":["import React, { useState, useEffect, useReducer, useContext } from 'react';\n\nimport Card from '../UI/Card/Card';\nimport classes from './Login.module.css';\nimport Button from '../UI/Button/Button';\nimport AuthContext from '../state/auth-context';\nimport Input from '../input/input';\n\nconst Login = () => {\n    /* const [enteredEmail, setEnteredEmail] = useState('');\n    const [emailIsValid, setEmailIsValid] = useState(); */\n    /* const [enteredPassword, setEnteredPassword] = useState('');\n    const [passwordIsValid, setPasswordIsValid] = useState(); */\n    const [formIsValid, setFormIsValid] = useState(false);\n\n    const emailReducer = (state, action) => {\n        if (action.type === 'USER_INPUT') {\n            return { value: action.value, isValid: action.value.includes('@') }; // dispatch가 호출하고 싶은 함수의 형태가 USER_INPUT의 type을 가질 때 function의 action(최신 값)의 정보를 가져옴\n        }\n        if (action.type === 'INPUT') {\n            return { value: state.value, isValid: state.value.includes('@') }; // dispatch가 호출하고 싶은 함수의 형태가 INPUT의 type을 가질 때 function의 state(prevState)의 정보를 가져옴 -> blur 처리\n        }\n        return { value: '', isValid: false }; // 둘다 아닐 때는 기본 값을 반환\n    };\n\n    const [emailState, dispatch] = useReducer(emailReducer, {\n        value: '',\n        isValid: null,\n    }); // 초깃값과 dispatch, emailReducer\n\n    const passwordReducer = (state, action) => {\n        if (action.type === 'USER_INPUT') {\n            return {\n                value: action.value,\n                isValid: action.value.trim().length > 6,\n            }; // dispatch가 호출하고 싶은 함수의 형태가 USER_INPUT의 type을 가질 때 function의 action(최신 값)의 정보를 가져옴\n        }\n        if (action.type === 'INPUT') {\n            return {\n                value: state.value,\n                isValid: state.value.trim().length > 6,\n            }; // dispatch가 호출하고 싶은 함수의 형태가 INPUT의 type을 가질 때 function의 state(prevState)의 정보를 가져옴 -> blur 처리\n        }\n        return { value: '', isValid: false }; // 둘다 아닐 때는 기본 값을 반환\n    };\n\n    const [passwordState, p_dispatch] = useReducer(passwordReducer, {\n        value: '',\n        isValid: null,\n    }); // 초깃값과 p_dispatch, passwordReducer 지정\n\n    const Authctx = useContext(AuthContext);\n\n    const emailChangeHandler = (event) => {\n        dispatch({ type: 'USER_INPUT', value: event.target.value }); // event가 일어날 때 값 변환\n    };\n\n    const passwordChangeHandler = (event) => {\n        p_dispatch({ type: 'USER_INPUT', value: event.target.value }); // event가 일어날 때 값 변환\n    };\n\n    const validateEmailHandler = () => {\n        dispatch({ type: 'INPUT' }); // event가 일어날 때 값 변환\n    };\n\n    const validatePasswordHandler = () => {\n        p_dispatch({ type: 'INPUT' }); // event가 일어날 때 값 변환\n    };\n\n    const submitHandler = (event) => {\n        event.preventDefault();\n        if (formIsValid) {\n            Authctx.onLogIn(emailState.value, passwordState.value);\n        } else {\n        }\n    };\n\n    const { isValid: emailIsValid } = emailState;\n    const { isValid: passwordIsValid } = passwordState;\n\n    useEffect(() => {\n        const identifier = setTimeout(() => {\n            console.log('Checking form valadity!');\n            setFormIsValid(emailIsValid && passwordIsValid);\n        }, 1000);\n        return () => {\n            console.log('CLEANUP');\n            clearTimeout(identifier);\n        };\n    }, [emailIsValid, passwordIsValid]);\n\n    return (\n        <Card className={classes.login}>\n            <form onSubmit={submitHandler}>\n                <Input\n                    isValid={emailIsValid}\n                    label={'E-Mail'}\n                    type={'email'}\n                    id={'email'}\n                    value={emailState.value}\n                    onChange={emailChangeHandler}\n                    onBlur={validateEmailHandler}\n                ></Input>\n                <Input\n                    isValid={passwordIsValid}\n                    label={'Password'}\n                    type={'password'}\n                    id={'password'}\n                    value={passwordState.value}\n                    onChange={passwordChangeHandler}\n                    onBlur={validatePasswordHandler}\n                ></Input>\n                <div className={classes.actions}>\n                    <Button type=\"submit\" className={classes.btn}>\n                        Login\n                    </Button>\n                </div>\n            </form>\n        </Card>\n    );\n};\n\nexport default Login;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}